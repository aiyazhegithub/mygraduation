<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.learn.mapper.CollectionsMapper" >
  <resultMap id="BaseResultMap" type="com.learn.pojo.Collections" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="publish_id" property="publishId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="isexpire" property="isexpire" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, publish_id, user_id, isexpire
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.learn.pojo.CollectionsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from collections
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from collections
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from collections
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.learn.pojo.CollectionsExample" >
    delete from collections
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.learn.pojo.Collections" >
    insert into collections (id, publish_id, user_id, 
      isexpire)
    values (#{id,jdbcType=BIGINT}, #{publishId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, 
      #{isexpire,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.learn.pojo.Collections" >


    insert into collections
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="publishId != null" >
        publish_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="isexpire != null" >
        isexpire,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="publishId != null" >
        #{publishId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="isexpire != null" >
        #{isexpire,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.learn.pojo.CollectionsExample" resultType="java.lang.Integer" >
    select count(*) from collections
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update collections
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.publishId != null" >
        publish_id = #{record.publishId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.isexpire != null" >
        isexpire = #{record.isexpire,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update collections
    set id = #{record.id,jdbcType=BIGINT},
      publish_id = #{record.publishId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      isexpire = #{record.isexpire,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.learn.pojo.Collections" >
    update collections
    <set >
      <if test="publishId != null" >
        publish_id = #{publishId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="isexpire != null" >
        isexpire = #{isexpire,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.learn.pojo.Collections" >
    update collections
    set publish_id = #{publishId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      isexpire = #{isexpire,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>



  <!--    -->

  <resultMap id="MyBaseResultMap" type="com.learn.pojo.Collections" >
    <id column="collecId" property="id" jdbcType="BIGINT" />
    <id column="id" property="publishGoods.id" jdbcType="BIGINT" />
    <result column="user_id" property="publishGoods.userId" jdbcType="BIGINT" />
    <result column="title" property="publishGoods.title" jdbcType="VARCHAR" />
    <result column="oprice" property="publishGoods.oprice" jdbcType="INTEGER" />
    <result column="sprice" property="publishGoods.sprice" jdbcType="INTEGER" />
    <result column="goods_type" property="publishGoods.goodsType" jdbcType="INTEGER" />
    <result column="goods_describe" property="publishGoods.goodsDescribe" jdbcType="VARCHAR" />
    <result column="img" property="publishGoods.img" jdbcType="VARCHAR" />
    <result column="begin_date" property="publishGoods.beginDate" jdbcType="DATE" />
    <result column="end_date" property="publishGoods.endDate" jdbcType="DATE" />
    <result column="isdeal" property="publishGoods.isdeal" jdbcType="BIT" />
  </resultMap>

  <select id="listUserCollections" resultMap="MyBaseResultMap" parameterType="java.lang.Long" >
    SELECT
    publish.*,
    collec.id AS collecId
    FROM
    `collections` AS collec,
    `publish_goods` AS publish
    WHERE
    collec.`user_id`=#{userId} AND
    collec.`publish_id`=publish.`id` ;

  </select>









</mapper>